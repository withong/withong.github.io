<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Spring on withong</title>
    <link>http://localhost:1313/tag/spring/</link>
    <description>Recent content in Spring on withong</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>ko</language>
    <lastBuildDate>Mon, 17 Mar 2025 22:00:03 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/tag/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[내일배움캠프] Spring 기초 1</title>
      <link>http://localhost:1313/camp/day-20/</link>
      <pubDate>Mon, 17 Mar 2025 22:00:03 +0900</pubDate>
      <guid>http://localhost:1313/camp/day-20/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;네트워크&#34;&gt;네트워크&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;인터넷(Internet)
&lt;ul&gt;
&lt;li&gt;TCP/IP 기반으로 동작하는 글로벌 네트워크.&lt;/li&gt;
&lt;li&gt;데이터 전송을 위해 유선(해저 케이블) 및 무선(위성 통신) 활용.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;인터넷 프로토콜(IP, Internet Protocol)
&lt;ul&gt;
&lt;li&gt;네트워크 내에서 기기를 식별하는 주소 체계.&lt;/li&gt;
&lt;li&gt;예시: &lt;code&gt;192.168.0.1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IP 방식의 문제점
&lt;ul&gt;
&lt;li&gt;애플리케이션 구분 불가능.&lt;/li&gt;
&lt;li&gt;비연결성: 수신 대상의 상태를 고려하지 않고 전송.&lt;/li&gt;
&lt;li&gt;비신뢰성: 패킷 손실 및 순서 뒤섞임 가능.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;tcp와-udp&#34;&gt;TCP와 UDP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;TCP(Transmission Control Protocol)
&lt;ul&gt;
&lt;li&gt;신뢰성 있는 데이터 전송 (3-Way Handshake 방식).&lt;/li&gt;
&lt;li&gt;패킷 순서 보장 및 오류 검출 가능.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UDP(User Datagram Protocol)
&lt;ul&gt;
&lt;li&gt;빠른 전송 속도를 우선시 (비신뢰성 전송).&lt;/li&gt;
&lt;li&gt;실시간 스트리밍, 온라인 게임 등에 사용.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PORT
&lt;ul&gt;
&lt;li&gt;같은 IP에서 여러 프로세스를 구분하는 번호.&lt;/li&gt;
&lt;li&gt;주요 포트 번호: HTTP(80), HTTPS(443), FTP(21), SSH(22).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;DNS(Domain Name System)
&lt;ul&gt;
&lt;li&gt;도메인과 IP 주소를 매핑하는 시스템.&lt;/li&gt;
&lt;li&gt;사람이 이해하기 쉬운 도메인(&lt;code&gt;google.com&lt;/code&gt;)을 IP 주소로 변환.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;URI(Uniform Resource Identifier)
&lt;ul&gt;
&lt;li&gt;인터넷 자원의 고유 식별자.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;URL(Uniform Resource Locator)
&lt;ul&gt;
&lt;li&gt;리소스의 위치를 나타내는 형식 (&lt;code&gt;https://spartacodingclub.kr/&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;브라우저에-url을-입력하면&#34;&gt;브라우저에 URL을 입력하면&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;사용자가 브라우저에 URL을 입력.&lt;/li&gt;
&lt;li&gt;DNS 조회를 통해 도메인에 해당하는 IP 주소 확인.&lt;/li&gt;
&lt;li&gt;웹 브라우저가 HTTP 요청을 생성.&lt;/li&gt;
&lt;li&gt;요청 패킷이 서버로 전송.&lt;/li&gt;
&lt;li&gt;서버에서 HTTP 요청을 처리 후 응답 생성.&lt;/li&gt;
&lt;li&gt;응답 패킷이 클라이언트로 전송.&lt;/li&gt;
&lt;li&gt;브라우저가 응답 데이터를 렌더링하여 화면 표시.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;용어-모음&#34;&gt;용어 모음&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;프로그래밍 명명규칙(Casing)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;snake_case&lt;/code&gt;: Python, DB 테이블에서 사용 (&lt;code&gt;user_name&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;camelCase&lt;/code&gt;: Java, JavaScript에서 변수 및 메서드 이름에 사용 (&lt;code&gt;userName&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PascalCase&lt;/code&gt;: 클래스 및 객체 이름에 사용 (&lt;code&gt;UserName&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kebab-case&lt;/code&gt;: URL 및 CSS에서 사용 (&lt;code&gt;user-name&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JSON(JavaScript Object Notation)
&lt;ul&gt;
&lt;li&gt;클라이언트-서버 간 데이터 교환을 위한 경량 데이터 포맷.&lt;/li&gt;
&lt;li&gt;XML 대비 가독성이 뛰어나고 용량이 작음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scale Up, Scale Out
&lt;ul&gt;
&lt;li&gt;Scale Up: 단일 서버의 성능 향상 (CPU, RAM 증가).&lt;/li&gt;
&lt;li&gt;Scale Out: 여러 대의 서버 확장 (부하 분산).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stateful vs Stateless
&lt;ul&gt;
&lt;li&gt;Stateful: 클라이언트의 상태를 유지해야 하는 서비스.&lt;/li&gt;
&lt;li&gt;Stateless: 서버가 클라이언트 상태를 저장하지 않음 (확장성 우수).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Connection vs Connectionless
&lt;ul&gt;
&lt;li&gt;Connection: 지속적 연결 유지 (HTTP/1.0).&lt;/li&gt;
&lt;li&gt;Connectionless: 필요할 때만 연결 (HTTP/1.1, HTTP/2).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;http&#34;&gt;HTTP&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HTTP(HyperText Transfer Protocol)
&lt;ul&gt;
&lt;li&gt;인터넷 상에서 클라이언트와 서버 간 데이터를 교환하는 프로토콜.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP 특징
&lt;ul&gt;
&lt;li&gt;Stateless(무상태): 클라이언트의 상태를 저장하지 않음.&lt;/li&gt;
&lt;li&gt;Connectionless(비연결): 요청-응답 후 연결을 끊음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP Message 구조
&lt;ul&gt;
&lt;li&gt;Request (요청)
&lt;ul&gt;
&lt;li&gt;Start Line: HTTP Method, URL, HTTP Version.&lt;/li&gt;
&lt;li&gt;Header: 추가적인 요청 정보 (예: &lt;code&gt;Content-Type&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Body: 요청 데이터 포함 (POST 요청 등).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Response (응답)
&lt;ul&gt;
&lt;li&gt;Status Code: 요청의 처리 결과 (&lt;code&gt;200 OK&lt;/code&gt;, &lt;code&gt;404 Not Found&lt;/code&gt; 등).&lt;/li&gt;
&lt;li&gt;Header: 응답 메타데이터.&lt;/li&gt;
&lt;li&gt;Body: 응답 데이터.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http-method와-상태-코드&#34;&gt;HTTP Method와 상태 코드&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HTTP Method
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET&lt;/code&gt;: 데이터 조회.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST&lt;/code&gt;: 데이터 생성.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUT&lt;/code&gt;: 데이터 전체 수정.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PATCH&lt;/code&gt;: 데이터 일부 수정.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELETE&lt;/code&gt;: 데이터 삭제.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP 상태 코드
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;200 OK&lt;/code&gt;: 정상 응답.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;201 Created&lt;/code&gt;: 리소스 생성 완료.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;400 Bad Request&lt;/code&gt;: 잘못된 요청.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;401 Unauthorized&lt;/code&gt;: 인증 필요.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;404 Not Found&lt;/code&gt;: 리소스 없음.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;500 Internal Server Error&lt;/code&gt;: 서버 내부 오류.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;http-header&#34;&gt;HTTP Header&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HTTP Header의 역할
&lt;ul&gt;
&lt;li&gt;요청과 응답의 부가 정보 제공.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;자주 사용하는 Header
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Content-Type&lt;/code&gt;: 데이터 형식 지정 (&lt;code&gt;application/json&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Authorization&lt;/code&gt;: 인증 정보 포함.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cache-Control&lt;/code&gt;: 캐시 정책 (&lt;code&gt;max-age&lt;/code&gt;, &lt;code&gt;no-cache&lt;/code&gt; 등).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Set-Cookie&lt;/code&gt;: 쿠키 설정 (세션 관리).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;restful-api&#34;&gt;Restful API&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;REST (Representational State Transfer)
&lt;ul&gt;
&lt;li&gt;리소스를 기반으로 한 API 설계 원칙.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RESTful API 설계 예시
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;POST /boards&lt;/code&gt; → 게시글 생성.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET /boards&lt;/code&gt; → 게시글 목록 조회.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET /boards/{id}&lt;/code&gt; → 특정 게시글 조회.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUT /boards/{id}&lt;/code&gt; → 게시글 수정.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELETE /boards/{id}&lt;/code&gt; → 게시글 삭제.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;web-application&#34;&gt;Web Application&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Web Server vs WAS(Web Application Server)
&lt;ul&gt;
&lt;li&gt;Web Server: 정적 콘텐츠 제공 (예: Nginx, Apache).&lt;/li&gt;
&lt;li&gt;WAS: 동적 콘텐츠 처리 (예: Tomcat, Spring Boot).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web System 구성
&lt;ul&gt;
&lt;li&gt;프론트엔드(클라이언트) → 백엔드(WAS) → 데이터베이스(DB).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;servlet&#34;&gt;Servlet&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Servlet
&lt;ul&gt;
&lt;li&gt;Java 기반 웹 애플리케이션을 처리하는 기술.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Servlet 동작 순서
&lt;ol&gt;
&lt;li&gt;클라이언트가 요청 전송.&lt;/li&gt;
&lt;li&gt;Servlet Container가 요청을 분석하여 Servlet 실행.&lt;/li&gt;
&lt;li&gt;Servlet이 요청을 처리하고 응답 생성.&lt;/li&gt;
&lt;li&gt;응답이 클라이언트에게 전달됨.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;thread&#34;&gt;Thread&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Thread
&lt;ul&gt;
&lt;li&gt;하나의 프로세스 내에서 실행되는 작업 단위.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multi-Thread
&lt;ul&gt;
&lt;li&gt;여러 작업을 동시에 실행하는 기술 (서버 성능 향상 가능).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;ssrserver-side-rendering-vs-csrclient-side-rendering&#34;&gt;SSR(Server Side Rendering) vs CSR(Client Side Rendering)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SSR: 서버에서 HTML을 생성하여 클라이언트로 전송 (초기 로딩 속도 빠름).&lt;/li&gt;
&lt;li&gt;CSR: 클라이언트에서 JavaScript를 이용해 동적으로 렌더링 (SPA에서 주로 사용).&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>과제 on withong</title>
    <link>https://withong.github.io/tag/%EA%B3%BC%EC%A0%9C/</link>
    <description>Recent content in 과제 on withong</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>ko</language>
    <lastBuildDate>Tue, 15 Apr 2025 17:53:03 +0900</lastBuildDate>
    <atom:link href="https://withong.github.io/tag/%EA%B3%BC%EC%A0%9C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>뉴스피드 API 트러블 슈팅</title>
      <link>https://withong.github.io/project/news-feed-01/</link>
      <pubDate>Tue, 15 Apr 2025 17:53:03 +0900</pubDate>
      <guid>https://withong.github.io/project/news-feed-01/</guid>
      <description>&lt;hr&gt;
&lt;br&gt;
&lt;h2 id=&#34;jsonformat을-이용한-사용자-요청-값-검증&#34;&gt;@JsonFormat을 이용한 사용자 요청 값 검증&lt;/h2&gt;
&lt;br&gt;
&lt;h3 id=&#34;상황&#34;&gt;상황&lt;/h3&gt;
&lt;p&gt;회원가입 시 사용자의 생년월일을 &lt;code&gt;UserCreateRequestDto&lt;/code&gt;에서 &lt;code&gt;LocalDate&lt;/code&gt; 타입으로 받고 있으며, 아래와 같이 &lt;code&gt;@JsonFormat&lt;/code&gt;을 사용하여 날짜 형식을 검증하고자 했음.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 생년월일&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@NotNull&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;생년월일은 필수 입력값입니다.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@JsonFormat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;yyyyMMdd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LocalDate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;birth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h3 id=&#34;문제&#34;&gt;문제&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;@JsonFormat&lt;/code&gt;은 지정한 형식과 다른 값이 입력될 경우, 컨트롤러에 진입하기 전에 JSON → Java 객체로 변환하는 Jackson 역직렬화 과정에서 예외를 발생시킴. 이때 발생하는 예외는 &lt;code&gt;@Valid&lt;/code&gt;에서 처리되지 않고 &lt;code&gt;BindingResult&lt;/code&gt;이나 &lt;code&gt;MethodArgumentNotValidException&lt;/code&gt;으로도 잡을 수 없음. &lt;code&gt;@JsonFormat&lt;/code&gt;의 예외는 &lt;code&gt;HttpMessageNotReadableException&lt;/code&gt;으로 처리되어 클라이언트에게는 단순한 400 Bad Request 응답으로 전달됨.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JWT란?</title>
      <link>https://withong.github.io/record/2025-04-10/</link>
      <pubDate>Thu, 10 Apr 2025 22:00:06 +0900</pubDate>
      <guid>https://withong.github.io/record/2025-04-10/</guid>
      <description>&lt;hr&gt;
&lt;br&gt;
&lt;h2 id=&#34;1-jwt-정의&#34;&gt;1. JWT 정의&lt;/h2&gt;
&lt;p&gt;JWT는 &lt;strong&gt;JSON Web Token&lt;/strong&gt;의 약자로, &lt;strong&gt;JSON&lt;/strong&gt; 형식의 데이터를 &lt;strong&gt;안전하게 전송&lt;/strong&gt;하기 위한 표준이다. 이 표준은 &lt;strong&gt;인터넷 상에서의 인증 및 권한 부여&lt;/strong&gt;와 관련된 시스템에서 주로 사용된다. 예를 들어, 사용자가 서버에 로그인하면 서버는 JWT를 생성하여 사용자에게 제공하고, 사용자는 이 JWT를 통해 인증을 유지할 수 있다.&lt;/p&gt;
&lt;p&gt;JWT는 본질적으로 &lt;strong&gt;세션 관리 방식&lt;/strong&gt;을 대체할 수 있다. 전통적인 세션 방식은 서버에 상태를 저장하고 세션 ID를 클라이언트에게 전달하는 방식이지만, JWT는 &lt;strong&gt;서버에 상태를 저장하지 않는&lt;/strong&gt; 방식을 채택하여 &lt;strong&gt;세션리스&lt;/strong&gt; 인증 방식을 가능하게 한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>QueryDSL을 활용한 조건 기반 일정 조회</title>
      <link>https://withong.github.io/record/2025-04-03/</link>
      <pubDate>Thu, 03 Apr 2025 20:24:51 +0900</pubDate>
      <guid>https://withong.github.io/record/2025-04-03/</guid>
      <description>&lt;hr&gt;
&lt;br&gt;
&lt;h2 id=&#34;querydsl이란&#34;&gt;QueryDSL이란?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;QueryDSL&lt;/strong&gt;은 Java에서 **타입 안정성(type-safe)**을 보장하는 방식으로 SQL과 유사한 쿼리를 작성할 수 있게 해주는 **도메인 특화 언어(DSL: Domain Specific Language)**이다. 주로 &lt;strong&gt;JPA와 함께 사용&lt;/strong&gt;되며, 복잡한 동적 쿼리 작성이나 조건 조합이 많은 경우 유용하다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;기존 JPQL의 단점인 문자열 기반 쿼리 작성의 오류 위험성을 줄이고, IDE의 코드 자동완성 기능을 활용할 수 있도록 해준다.&lt;/p&gt;&lt;/blockquote&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;br&gt;
&lt;h2 id=&#34;왜-querydsl을-사용하는가&#34;&gt;왜 QueryDSL을 사용하는가?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;컴파일 타임에 문법 오류 확인 가능&lt;/strong&gt;&lt;br&gt;
→ JPQL은 문자열이기 때문에 런타임에 오류가 나지만, QueryDSL은 Java 코드로 작성되기 때문에 컴파일 시점에 오류를 잡을 수 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>정규 표현식을 활용한 사용자 등록 요청 데이터 검증</title>
      <link>https://withong.github.io/record/2025-04-01-02/</link>
      <pubDate>Tue, 01 Apr 2025 22:05:47 +0900</pubDate>
      <guid>https://withong.github.io/record/2025-04-01-02/</guid>
      <description>&lt;hr&gt;
&lt;br&gt;
&lt;h2 id=&#34;정규-표현식regular-expression이란&#34;&gt;정규 표현식(Regular Expression)이란?&lt;/h2&gt;
&lt;p&gt;**정규 표현식(정규식, regex)**은 특정 &lt;strong&gt;문자열의 규칙을 표현하는 문법&lt;/strong&gt;이다.&lt;br&gt;
일종의 &lt;strong&gt;패턴 언어&lt;/strong&gt;로, 문자열이 특정한 조건을 만족하는지 검사하거나, 일부를 추출하거나, 변환할 때 사용된다.&lt;/p&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;br&gt;
&lt;h3 id=&#34;1-정규-표현식은-언제-왜-사용하는가&#34;&gt;1. 정규 표현식은 언제, 왜 사용하는가?&lt;/h3&gt;
&lt;h4 id=&#34;입력값-검증-validation&#34;&gt;입력값 검증 (Validation)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 입력한 값이 이메일 형식인지, 숫자인지, 비밀번호 조건에 맞는지 등을 검사할 때 사용한다.&lt;/li&gt;
&lt;li&gt;프론트엔드/백엔드 양쪽에서 모두 널리 쓰인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;문자열-추출-또는-치환&#34;&gt;문자열 추출 또는 치환&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;특정 문자나 단어가 포함된 부분을 찾아내거나, 그 값을 다른 값으로 바꾸는 작업도 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;패턴-기반-검색&#34;&gt;패턴 기반 검색&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;로그 분석, 텍스트 필터링, 문서 내 키워드 찾기 등에서 활용된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;br&gt;
&lt;h3 id=&#34;2-자주-사용하는-정규-표현식-기호&#34;&gt;2. 자주 사용하는 정규 표현식 기호&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;기호&lt;/th&gt;
          &lt;th&gt;의미&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;임의의 한 문자 (개행 제외)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;문자열의 시작&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;문자열의 끝&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;앞 문자가 0개 이상 반복&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;앞 문자가 1개 이상 반복&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;앞 문자가 0개 또는 1개&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;괄호 안의 문자 중 하나&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;그룹 (하나의 단위로 묶음)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;\\d&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;숫자 (0~9)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;\\w&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;알파벳 또는 숫자 또는 밑줄&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;\\s&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;공백 문자 (스페이스, 탭 등)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;{n}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;정확히 n개 반복&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;{n,}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;n개 이상 반복&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;{n,m}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;n개 이상, m개 이하 반복&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;br&gt;
&lt;h2 id=&#34;createuserrequest-dto에-사용된-정규-표현식-분석&#34;&gt;&lt;code&gt;CreateUserRequest&lt;/code&gt; DTO에 사용된 정규 표현식 분석&lt;/h2&gt;
&lt;h3 id=&#34;1-이름-필드&#34;&gt;1. 이름 필드&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;regexp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;^[\\p{L}]+$&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;이름은 문자만 입력 가능합니다.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;정규식-pl&#34;&gt;정규식: &lt;code&gt;^[\\p{L}]+$&lt;/code&gt;&lt;/h4&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;패턴&lt;/th&gt;
          &lt;th&gt;의미&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;문자열 시작&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;\\p{L}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;유니코드 문자 중 &amp;lsquo;Letter&amp;rsquo;(문자) 범주에 해당하는 모든 글자 (한글, 영어, 일본어 등 모두 포함)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;1개 이상 반복&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;문자열 끝&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;의미 요약&lt;/strong&gt;: &amp;ldquo;문자만 1자 이상 포함된 문자열이며, 처음부터 끝까지 모두 문자인 경우만 허용&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bcrypt를 활용한 비밀번호 암호화</title>
      <link>https://withong.github.io/record/2025-04-01-03/</link>
      <pubDate>Tue, 01 Apr 2025 16:50:00 +0900</pubDate>
      <guid>https://withong.github.io/record/2025-04-01-03/</guid>
      <description>&lt;hr&gt;
&lt;br&gt;
&lt;h2 id=&#34;1-해시hash란&#34;&gt;1. 해시(Hash)란?&lt;/h2&gt;
&lt;p&gt;**해시 함수(hash function)**는 임의의 길이를 가진 입력값을 고정된 길이의 출력값으로 변환하는 함수다.&lt;br&gt;
출력값은 일반적으로 &lt;strong&gt;해시 값(hash value)&lt;/strong&gt; 또는 **다이제스트(digest)**라고 부른다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;예를 들어, &amp;ldquo;password123&amp;quot;이라는 문자열을 해시 함수에 넣으면,&lt;br&gt;
&lt;code&gt;ef92b778bafe771e89245b89ecbc08a44a4e166c06659911881f383d4473e94f&lt;/code&gt; 같은 고정된 길이의 문자열로 바뀐다.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;해시 함수의 주요 특징:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;입력값이 조금이라도 다르면 결과가 완전히 달라짐&lt;/li&gt;
&lt;li&gt;해시 값만 보고는 원래 값을 알 수 없음 (일방향성)&lt;/li&gt;
&lt;li&gt;같은 입력에 대해서는 항상 같은 출력이 나옴&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;br&gt;
&lt;h2 id=&#34;2-일반적인-해시-함수의-문제점&#34;&gt;2. 일반적인 해시 함수의 문제점&lt;/h2&gt;
&lt;p&gt;SHA-256, SHA-512 같은 일반적인 해시 함수는 속도가 매우 빠르다는 장점이 있지만,&lt;br&gt;
&lt;strong&gt;비밀번호 저장&lt;/strong&gt;에는 오히려 그 점이 &lt;strong&gt;취약점&lt;/strong&gt;이 된다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>키오스크 회고</title>
      <link>https://withong.github.io/project/kiosk-05/</link>
      <pubDate>Fri, 14 Mar 2025 19:14:24 +0900</pubDate>
      <guid>https://withong.github.io/project/kiosk-05/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;코드의-주요-기능&#34;&gt;코드의 주요 기능&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CartItem&lt;/code&gt; 클래스를 도입해 장바구니 아이템을 관리.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Discount&lt;/code&gt; Enum을 사용해 다양한 할인 유형 적용 가능.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kiosk&lt;/code&gt;에서 직접 사용자 입력을 처리하고 메뉴 탐색, 장바구니 관리 등을 수행.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Main&lt;/code&gt;에서 &lt;code&gt;Kiosk&lt;/code&gt;를 실행해 전체 기능을 제어.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;분석&#34;&gt;분석&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cart&lt;/code&gt;와 &lt;code&gt;CartItem&lt;/code&gt;을 활용해 객체지향적으로 장바구니를 관리.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Discount&lt;/code&gt; Enum을 통해 생일, 리뷰 작성 등 다양한 할인 적용 가능.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;코드-구조-및-객체지향-설계&#34;&gt;코드 구조 및 객체지향 설계&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Kiosk&lt;/code&gt; 클래스가 너무 많은 기능을 포함하고 있어 SRP(단일 책임 원칙)를 지키지 못하는 부분이 있다.&lt;/li&gt;
&lt;li&gt;UI 출력과 비즈니스 로직이 혼재되어 있어 유지보수성이 낮다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;코드-스타일-및-가독성&#34;&gt;코드 스타일 및 가독성&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Kiosk&lt;/code&gt;에서 너무 많은 로직을 처리하여 일부 메서드가 길어지고 복잡해질 가능성이 있음.&lt;/li&gt;
&lt;li&gt;예외 처리가 부족하여, 예상치 못한 입력이 들어왔을 때 프로그램이 멈출 가능성이 있음.&lt;/li&gt;
&lt;li&gt;코드 내 중복이 일부 존재하며, 이를 줄이면 가독성이 더 좋아질 수 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;실행-흐름&#34;&gt;실행 흐름&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Main&lt;/code&gt;에서 &lt;code&gt;Kiosk&lt;/code&gt;를 초기화하고 &lt;code&gt;start()&lt;/code&gt; 실행.&lt;/li&gt;
&lt;li&gt;사용자의 입력을 받아 메뉴 탐색, 장바구니 관리 진행.&lt;/li&gt;
&lt;li&gt;주문 시 할인 정보를 입력받아 &lt;code&gt;Discount&lt;/code&gt; Enum을 활용해 적용.&lt;/li&gt;
&lt;li&gt;결제 후 장바구니를 비움.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;분석-1&#34;&gt;분석&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Kiosk&lt;/code&gt;에서 거의 모든 것을 관리하기 때문에 실행 흐름이 길어질수록 복잡해질 가능성이 있음.&lt;/li&gt;
&lt;li&gt;기능별로 적절히 분리하면 코드의 유지보수성과 확장성이 더 좋아질 수 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;개선할-점&#34;&gt;개선할 점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Kiosk&lt;/code&gt; 클래스의 역할을 분리해 &lt;code&gt;KioskService&lt;/code&gt; 같은 클래스를 만들어야 함.&lt;/li&gt;
&lt;li&gt;UI 출력과 비즈니스 로직을 분리하여 코드의 가독성과 유지보수성을 높여야 함.&lt;/li&gt;
&lt;li&gt;예외 처리가 부족하므로 &lt;code&gt;IllegalArgumentException&lt;/code&gt; 등을 적극 활용해야 함.&lt;/li&gt;
&lt;li&gt;중복된 코드가 일부 존재하므로 메서드로 분리하여 코드의 일관성을 높일 필요가 있음.&lt;/li&gt;
&lt;li&gt;사용자의 입력을 검증하는 로직을 별도로 분리하여 입력 오류를 방지해야 함.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;&lt;em&gt;🗨️ by GPT&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>키오스크 도전 Lv 2</title>
      <link>https://withong.github.io/project/kiosk-04/</link>
      <pubDate>Wed, 12 Mar 2025 21:01:14 +0900</pubDate>
      <guid>https://withong.github.io/project/kiosk-04/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;요구사항&#34;&gt;요구사항&lt;/h2&gt;
&lt;h3 id=&#34;lv-2-enum-람다--스트림을-활용한-주문-및-장바구니-관리&#34;&gt;Lv 2. Enum, 람다 &amp;amp; 스트림을 활용한 주문 및 장바구니 관리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;요구사항이 가지는 의도&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;의도&lt;/strong&gt; : 고급 자바 기능을 활용해 프로그램의 효율성과 코드의 가독성을 개선하는 것을 목표로 합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;목적&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Enum을 통해 상수를 안전하게 관리하고, 프로그램 구조를 간결하게&lt;/li&gt;
&lt;li&gt;제네릭을 활용하여 데이터 유연성을 높이고, 재사용 가능한 코드를 설계&lt;/li&gt;
&lt;li&gt;스트림 API를 사용하여 데이터를 필터링하고, 간결한 코드로 동작을 구현&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enum을 활용한 사용자 유형별 할인율 관리하기&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;사용자 유형의 Enum 정의 및 각 사용자 유형에 따른 할인율 적용
&lt;ul&gt;
&lt;li&gt;예시 : 군인, 학생, 일반인&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;주문 시, 사용자 유형에 맞는 할인율 적용해 총 금액 계산&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;람다 &amp;amp; 스트림을 활용한 장바구니 조회 기능&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;기존에 생성한 Menu의 MenuItem을 조회 할 때 스트림을 사용하여 출력하도록 수정&lt;/li&gt;
&lt;li&gt;기존 장바구니에서 특정 메뉴 빼기 기능을 통한 스트림 활용
&lt;ul&gt;
&lt;li&gt;예시 : 장바구니에 SmokeShack 가 들어 있다면, stream.filter를 활용하여 특정 메뉴 이름을 가진 메뉴 장바구니에서 제거&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;구현-기능&#34;&gt;구현 기능&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/withong/nbc-chapter-02/tree/main/kiosk/challenge/level2&#34;&gt;# 전체 코드&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>키오스크 도전 Lv 1</title>
      <link>https://withong.github.io/project/kiosk-03/</link>
      <pubDate>Wed, 12 Mar 2025 11:17:50 +0900</pubDate>
      <guid>https://withong.github.io/project/kiosk-03/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;요구사항&#34;&gt;요구사항&lt;/h2&gt;
&lt;h3 id=&#34;lv-1-장바구니-및-구매하기-기능을-추가하기&#34;&gt;Lv 1. 장바구니 및 구매하기 기능을 추가하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;요구사항이 가지는 의도&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;의도&lt;/strong&gt;: 클래스 간 연계를 통해 객체 지향 프로그래밍의 기본적인 설계를 익히고, 사용자 입력에 따른 프로그램 흐름 제어와 상태 관리를 학습&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;목표&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;클래스 간 역할 분리를 이해하고, 적절히 협력하는 객체를 설계&lt;/li&gt;
&lt;li&gt;프로그램 상태 변경 및 데이터 저장을 연습&lt;/li&gt;
&lt;li&gt;사용자 입력에 따른 예외 처리와 조건 분기를 연습&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;장바구니 생성 및 관리 기능&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 선택한 메뉴를 장바구니에 추가할 수 있는 기능을 제공합니다.&lt;/li&gt;
&lt;li&gt;장바구니는 메뉴명, 수량, 가격 정보를 저장하며, 항목을 동적으로 추가 및 조회할 수 있어야 합니다.&lt;/li&gt;
&lt;li&gt;사용자가 잘못된 선택을 했을 경우 예외를 처리합니다(예: 유효하지 않은 메뉴 번호 입력)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;장바구니 출력 및 금액 계산&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 결제를 시도하기 전에, 장바구니에 담긴 모든 메뉴와 총 금액을 출력합니다.&lt;/li&gt;
&lt;li&gt;출력 예시
&lt;ul&gt;
&lt;li&gt;각 메뉴의 이름, 가격, 수량&lt;/li&gt;
&lt;li&gt;총 금액 합계&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;장바구니 담기 기능&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;메뉴를 클릭하면 장바구니에 추가할 지 물어보고, 입력값에 따라 “추가”, “취소” 처리합니다.
&lt;ul&gt;
&lt;li&gt;메뉴는 한 번에 1개만 담을 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;장바구니에 담은 목록을 출력합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;주문 기능&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;장바구니에 담긴 모든 항목을 출력합니다.&lt;/li&gt;
&lt;li&gt;합산하여 총 금액을 계산하고, “주문하기”를 누르면 장바구니를 초기화합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;구현-기능&#34;&gt;구현 기능&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/withong/nbc-chapter-02/tree/main/kiosk/challenge/level1&#34;&gt;# 전체 코드&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>키오스크 필수 Lv 4-5</title>
      <link>https://withong.github.io/project/kiosk-02/</link>
      <pubDate>Mon, 10 Mar 2025 19:13:06 +0900</pubDate>
      <guid>https://withong.github.io/project/kiosk-02/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;요구사항&#34;&gt;요구사항&lt;/h2&gt;
&lt;h3 id=&#34;lv-4-객체-지향-설계를-적용해-음식-메뉴와-주문-내역을-클래스-기반으로-관리하기&#34;&gt;Lv 4. 객체 지향 설계를 적용해 음식 메뉴와 주문 내역을 클래스 기반으로 관리하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Menu&lt;/code&gt; 클래스 생성하기&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;설명 : MenuItem 클래스를 관리하는 클래스입니다.
예를 들어, 버거 메뉴, 음료 메뉴 등 각 카테고리 내에 여러 &lt;code&gt;MenuItem&lt;/code&gt;을 포함합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;List&amp;lt;MenuItem&amp;gt;&lt;/code&gt; 은 &lt;code&gt;Kiosk&lt;/code&gt; 클래스가 관리하기에 적절하지 않으므로 Menu 클래스가 관리하도록 변경합니다.&lt;/li&gt;
&lt;li&gt;여러 버거들을 포함하는 상위 개념 ‘버거’ 같은 &lt;code&gt;카테고리 이름&lt;/code&gt; 필드를 갖습니다.&lt;/li&gt;
&lt;li&gt;메뉴 카테고리 이름을 반환하는 메서드가 구현되어야 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&#34;lv-5-캡슐화-적용하기&#34;&gt;Lv 5. 캡슐화 적용하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MenuItem&lt;/code&gt;, &lt;code&gt;Menu&lt;/code&gt; 그리고 &lt;code&gt;Kiosk&lt;/code&gt; 클래스의 필드에 직접 접근하지 못하도록 설정합니다.&lt;/li&gt;
&lt;li&gt;Getter와 Setter 메서드를 사용해 데이터를 관리합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;구현-기능&#34;&gt;구현 기능&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/withong/nbc-chapter-02/tree/main/kiosk/basic/level4&#34;&gt;#전체 코드&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>키오스크 필수 Lv 1-3</title>
      <link>https://withong.github.io/project/kiosk-01/</link>
      <pubDate>Fri, 07 Mar 2025 21:00:00 +0900</pubDate>
      <guid>https://withong.github.io/project/kiosk-01/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;요구사항&#34;&gt;요구사항&lt;/h2&gt;
&lt;h3 id=&#34;lv-1-기본적인-키오스크를-프로그래밍해보자&#34;&gt;Lv 1. 기본적인 키오스크를 프로그래밍해보자&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;요구사항이 가지는 의도&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;입력 처리와 간단한 흐름 제어를 복습합니다. (프로그래밍 검증)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Scanner&lt;/code&gt; 활용법, 조건문, 반복문을 재확인하며 입력 데이터를 처리하는 방법 강화&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;햄버거 메뉴 출력 및 선택하기&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실행시 햄버거 메뉴가 표시되고, 이후 Scanner로 숫자를 입력받아서 메뉴를 선택할 수 있다.&lt;/li&gt;
&lt;li&gt;제시된 메뉴 중 입력받은 숫자에 따라 다른 로직을 실행하는 코드를 작성합니다.&lt;/li&gt;
&lt;li&gt;반복문을 이용해서 특정 번호가 입력되면 프로그램을 종료합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&#34;lv-2-객체-지향-설계를-적용해-햄버거-메뉴를-클래스로-관리하기&#34;&gt;Lv 2. 객체 지향 설계를 적용해 햄버거 메뉴를 클래스로 관리하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;요구사항이 가지는 의도&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>계산기 Lv 3 회고</title>
      <link>https://withong.github.io/project/calculator-05/</link>
      <pubDate>Wed, 05 Mar 2025 23:00:00 +0900</pubDate>
      <guid>https://withong.github.io/project/calculator-05/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;✅ [문제] 알고리즘 &amp;amp; SQL 문제 풀기&lt;br&gt;
✅ [과제] Java 계산기 만들기 level 3 마무리&lt;br&gt;
✅ [과제] 과제 TIL &amp;amp; 트러블 슈팅 작성&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-개인-과제---도전-구현&#34;&gt;✅ 개인 과제 - 도전 구현&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://velog.io/@ezro/camp-task-3&#34;&gt;[내일배움캠프] 과제 - 계산기 3&lt;/a&gt; &lt;strong&gt;/&lt;/strong&gt; &lt;a href=&#34;https://github.com/withong/nbc-chapter-02/tree/main/calculator/level3&#34;&gt;[GitHub] nbc-chapter-02/calculator/level3&lt;/a&gt;
&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-level-2-vs-level-3&#34;&gt;🫠 &lt;code&gt;level 2 vs level 3&lt;/code&gt;&lt;/h2&gt;
&lt;br&gt;
&lt;h3 id=&#34;개선된-점&#34;&gt;개선된 점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;단일 클래스 구조 → 다층 구조 (패키지 분리)&lt;/li&gt;
&lt;li&gt;Enum을 통한 연산자(Operator) 관리&lt;/li&gt;
&lt;li&gt;제네릭(Operand) + BigDecimal 도입&lt;/li&gt;
&lt;li&gt;람다와 스트림을 이용한 결과 필터링 기능 추가&lt;/li&gt;
&lt;li&gt;커스텀 예외 클래스(CalculatorException) 활용&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&#34;개선할-점&#34;&gt;개선할 점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Operand&amp;lt;T&amp;gt;&lt;/code&gt;가 BigDecimal로만 사용되는 점&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>계산기 Lv 3</title>
      <link>https://withong.github.io/project/calculator-04/</link>
      <pubDate>Wed, 05 Mar 2025 22:00:00 +0900</pubDate>
      <guid>https://withong.github.io/project/calculator-04/</guid>
      <description>&lt;h2 id=&#34;요구사항&#34;&gt;요구사항&lt;/h2&gt;
&lt;p&gt;Enum, 제네릭, 람다 &amp;amp; 스트림을 이해한 계산기 만들기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;현재 사칙연산 계산기는 (➕,➖,✖️,➗) 이렇게 총 4가지 연산 타입으로 구성되어 있습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enum 타입을 활용하여 연산자 타입에 대한 정보를 관리하고 이를 사칙연산 계산기 ArithmeticCalculator 클래스에 활용 해봅니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;실수, 즉 double 타입의 값을 전달 받아도 연산이 수행하도록 만들기&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;키워드 : &lt;code&gt;제네릭&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;단순히, 기존의 Int 타입을 double 타입으로 바꾸는 게 아닌 점에 주의하세요!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;지금까지는 ArithmeticCalculator, 즉 사칙연산 계산기는 양의 정수(0 포함)를 매개변수로 전달받아 연산을 수행&lt;/li&gt;
&lt;li&gt;피연산자를 여러 타입으로 받을 수 있도록 기능을 확장
&lt;ul&gt;
&lt;li&gt;ArithmeticCalculator 클래스의 연산 메서드(&lt;code&gt;calculate&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;위 요구사항을 만족할 수 있도록 ArithmeticCalculator 클래스를 수정합니다. (제네릭)
&lt;ul&gt;
&lt;li&gt;추가적으로 수정이 필요한 다른 클래스나 메서드가 있다면 같이 수정 해주세요.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;저장된 연산 결과들 중 Scanner로 입력받은 값보다 큰 결과값 들을 출력&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>계산기 Lv 1-2 회고</title>
      <link>https://withong.github.io/project/calculator-03/</link>
      <pubDate>Fri, 28 Feb 2025 22:00:00 +0900</pubDate>
      <guid>https://withong.github.io/project/calculator-03/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;✅ [과제] Java 계산기 만들기 level 2 수정&lt;br&gt;
✅ [과제] 과제 TIL &amp;amp; 트러블 슈팅 작성&lt;br&gt;
✅ [문제] 알고리즘 문제 풀기&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;br&gt;
&lt;h2 id=&#34;-개인-과제---필수-구현&#34;&gt;✅ 개인 과제 - 필수 구현&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://velog.io/@ezro/camp-task-1&#34;&gt;[내일배움캠프] 과제 - 계산기 1&lt;/a&gt; &lt;strong&gt;/&lt;/strong&gt; &lt;a href=&#34;https://github.com/withong/nbc-chapter-02/tree/main/calculator/level1&#34;&gt;[GitHub] nbc-chapter-02/calculator/level1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://velog.io/@ezro/camp-task-2&#34;&gt;[내일배움캠프] 과제 - 계산기 2&lt;/a&gt; &lt;strong&gt;/&lt;/strong&gt; &lt;a href=&#34;https://github.com/withong/nbc-chapter-02/tree/main/calculator/level2&#34;&gt;[GitHub] nbc-chapter-02/calculator/level2&lt;/a&gt;
&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-level-1-vs-level-2&#34;&gt;🫠 &lt;code&gt;level 1 vs level 2&lt;/code&gt;&lt;/h2&gt;
&lt;h3 id=&#34;개선된-점&#34;&gt;개선된 점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;계산 결과 객체, 계산기 기능 클래스, 프로그램 실행으로 역할 분리&lt;/li&gt;
&lt;li&gt;&lt;code&gt;calculate()&lt;/code&gt;의 반환 타입 &lt;code&gt;double&lt;/code&gt;에서 &lt;code&gt;String&lt;/code&gt;으로 변경&lt;br&gt;
→ 연산 오류 처리 반환값 &lt;code&gt;-9999&lt;/code&gt;에서 &lt;code&gt;의미 있는 메시지&lt;/code&gt;로 개선&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CalculationRecord&lt;/code&gt; 클래스 추가하여 연산 기록 저장 방식 개선&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trimRecords()&lt;/code&gt; 추가하여 과도한 데이터 누적 방지&lt;/li&gt;
&lt;li&gt;0으로 나누기 처리 &lt;code&gt;Error&lt;/code&gt;에서 &lt;code&gt;정의되지 않음&lt;/code&gt;으로 개선&lt;/li&gt;
&lt;li&gt;int 범위 초과 처리 &lt;code&gt;Error&lt;/code&gt;에서 &lt;code&gt;연산 범위 초과&lt;/code&gt;로 개선&lt;/li&gt;
&lt;li&gt;최근 연산 기록 조회할 수 있도록 &lt;code&gt;showRecords()&lt;/code&gt; 추가&lt;/li&gt;
&lt;li&gt;사용자가 직접 삭제할 수 있도록 &lt;code&gt;removeRecords()&lt;/code&gt; 메서드 추가.
&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;개선할-점&#34;&gt;개선할 점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt; 범위 초과하는 입력값, 연산 결과 오류 → &lt;code&gt;long&lt;/code&gt;으로 확장&lt;/li&gt;
&lt;li&gt;오류 처리 방식 &lt;code&gt;handleError&lt;/code&gt; → 커스텀 예외 처리&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>계산기 Lv 2</title>
      <link>https://withong.github.io/project/calculator-02/</link>
      <pubDate>Fri, 28 Feb 2025 21:00:00 +0900</pubDate>
      <guid>https://withong.github.io/project/calculator-02/</guid>
      <description>&lt;h2 id=&#34;요구사항&#34;&gt;요구사항&lt;/h2&gt;
&lt;p&gt;클래스를 적용해 기본적인 연산을 수행할 수 있는 계산기 만들기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;사칙연산을 수행 후, 결과값 반환 메서드 구현 &amp;amp; 연산 결과를 저장하는 컬렉션 타입 필드를 가진 Calculator 클래스를 생성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사칙연산을 수행한 후, 결과값을 반환하는 메서드 구현&lt;/li&gt;
&lt;li&gt;연산 결과를 저장하는 컬렉션 타입 필드를 가진 Calculator 클래스를 생성&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;양의 정수 2개(0 포함)와 연산 기호를 매개변수로 받아 사칙연산(➕,➖,✖️,➗) 기능을 수행한 후 2) 결과 값을 반환하는 메서드와 연산 결과를 저장하는 컬렉션 타입 필드를 가진 Calculator 클래스를 생성합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lv 1에서 구현한 App 클래스의 main 메서드에 Calculator 클래스가 활용될 수 있도록 수정&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>계산기 Lv 1</title>
      <link>https://withong.github.io/project/calculator-01/</link>
      <pubDate>Wed, 26 Feb 2025 22:00:00 +0900</pubDate>
      <guid>https://withong.github.io/project/calculator-01/</guid>
      <description>&lt;h2 id=&#34;요구사항&#34;&gt;요구사항&lt;/h2&gt;
&lt;p&gt;클래스 없이 기본적인 연산을 수행할 수 있는 계산기 만들기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;양의 정수(0 포함)를 입력받기&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scanner를 사용하여 양의 정수 2개(0 포함)를 전달 받을 수 있습니다.&lt;/li&gt;
&lt;li&gt;양의 정수는 각각 하나씩 전달 받습니다.&lt;/li&gt;
&lt;li&gt;양의 정수는 적합한 타입으로 선언한 변수에 저장합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;사칙연산 기호(➕,➖,✖️,➗)를 입력받기&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scanner를 사용하여 사칙연산 기호를 전달 받을 수 있습니다.&lt;/li&gt;
&lt;li&gt;사칙연산 기호를 적합한 타입으로 선언한 변수에 저장합니다. (&lt;code&gt;charAt(0)&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;위에서 입력받은 양의 정수 2개와 사칙연산 기호를 사용하여 연산을 진행한 후 결과값을 출력하기&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;키워드 : &lt;code&gt;if&lt;/code&gt; &lt;code&gt;switch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;사칙연산 기호에 맞는 연산자를 사용하여 연산을 진행합니다.&lt;/li&gt;
&lt;li&gt;입력받은 연산 기호를 구분하기 위해 제어문을 사용합니다. (예를 들면 if, switch)&lt;/li&gt;
&lt;li&gt;연산 오류가 발생할 경우 해당 오류에 대한 내용을 정제하여 출력합니다.
&lt;ul&gt;
&lt;li&gt;ex) “나눗셈 연산에서 분모(두번째 정수)에 0이 입력될 수 없습니다.“&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;반복문을 사용하되, 반복의 종료를 알려주는 “exit” 문자열을 입력하기 전까지 무한으로 계산을 진행할 수 있도록 소스 코드를 수정하기&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

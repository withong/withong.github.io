<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>회고 on withong</title>
    <link>http://localhost:1313/tag/%ED%9A%8C%EA%B3%A0/</link>
    <description>Recent content in 회고 on withong</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>ko</language>
    <lastBuildDate>Fri, 14 Mar 2025 19:14:24 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/tag/%ED%9A%8C%EA%B3%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[내일배움캠프] 키오스크 회고</title>
      <link>http://localhost:1313/camp/day-19/</link>
      <pubDate>Fri, 14 Mar 2025 19:14:24 +0900</pubDate>
      <guid>http://localhost:1313/camp/day-19/</guid>
      <description>&lt;hr&gt;
&lt;h3 id=&#34;코드의-주요-기능&#34;&gt;코드의 주요 기능&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CartItem&lt;/code&gt; 클래스를 도입해 장바구니 아이템을 관리.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Discount&lt;/code&gt; Enum을 사용해 다양한 할인 유형 적용 가능.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kiosk&lt;/code&gt;에서 직접 사용자 입력을 처리하고 메뉴 탐색, 장바구니 관리 등을 수행.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Main&lt;/code&gt;에서 &lt;code&gt;Kiosk&lt;/code&gt;를 실행해 전체 기능을 제어.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;분석&#34;&gt;분석&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cart&lt;/code&gt;와 &lt;code&gt;CartItem&lt;/code&gt;을 활용해 객체지향적으로 장바구니를 관리.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Discount&lt;/code&gt; Enum을 통해 생일, 리뷰 작성 등 다양한 할인 적용 가능.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;코드-구조-및-객체지향-설계&#34;&gt;코드 구조 및 객체지향 설계&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Kiosk&lt;/code&gt; 클래스가 너무 많은 기능을 포함하고 있어 SRP(단일 책임 원칙)를 지키지 못하는 부분이 있다.&lt;/li&gt;
&lt;li&gt;UI 출력과 비즈니스 로직이 혼재되어 있어 유지보수성이 낮다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;코드-스타일-및-가독성&#34;&gt;코드 스타일 및 가독성&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Kiosk&lt;/code&gt;에서 너무 많은 로직을 처리하여 일부 메서드가 길어지고 복잡해질 가능성이 있음.&lt;/li&gt;
&lt;li&gt;예외 처리가 부족하여, 예상치 못한 입력이 들어왔을 때 프로그램이 멈출 가능성이 있음.&lt;/li&gt;
&lt;li&gt;코드 내 중복이 일부 존재하며, 이를 줄이면 가독성이 더 좋아질 수 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;실행-흐름&#34;&gt;실행 흐름&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Main&lt;/code&gt;에서 &lt;code&gt;Kiosk&lt;/code&gt;를 초기화하고 &lt;code&gt;start()&lt;/code&gt; 실행.&lt;/li&gt;
&lt;li&gt;사용자의 입력을 받아 메뉴 탐색, 장바구니 관리 진행.&lt;/li&gt;
&lt;li&gt;주문 시 할인 정보를 입력받아 &lt;code&gt;Discount&lt;/code&gt; Enum을 활용해 적용.&lt;/li&gt;
&lt;li&gt;결제 후 장바구니를 비움.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;분석-1&#34;&gt;분석&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Kiosk&lt;/code&gt;에서 거의 모든 것을 관리하기 때문에 실행 흐름이 길어질수록 복잡해질 가능성이 있음.&lt;/li&gt;
&lt;li&gt;기능별로 적절히 분리하면 코드의 유지보수성과 확장성이 더 좋아질 수 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;개선할-점&#34;&gt;개선할 점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Kiosk&lt;/code&gt; 클래스의 역할을 분리해 &lt;code&gt;KioskService&lt;/code&gt; 같은 클래스를 만들어야 함.&lt;/li&gt;
&lt;li&gt;UI 출력과 비즈니스 로직을 분리하여 코드의 가독성과 유지보수성을 높여야 함.&lt;/li&gt;
&lt;li&gt;예외 처리가 부족하므로 &lt;code&gt;IllegalArgumentException&lt;/code&gt; 등을 적극 활용해야 함.&lt;/li&gt;
&lt;li&gt;중복된 코드가 일부 존재하므로 메서드로 분리하여 코드의 일관성을 높일 필요가 있음.&lt;/li&gt;
&lt;li&gt;사용자의 입력을 검증하는 로직을 별도로 분리하여 입력 오류를 방지해야 함.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;&lt;em&gt;🗨️ by GPT&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>[내일배움캠프] 계산기 Lv 3 회고</title>
      <link>http://localhost:1313/camp/day-12/</link>
      <pubDate>Wed, 05 Mar 2025 23:00:00 +0900</pubDate>
      <guid>http://localhost:1313/camp/day-12/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;✅ [문제] 알고리즘 &amp;amp; SQL 문제 풀기&lt;br&gt;
✅ [과제] Java 계산기 만들기 level 3 마무리&lt;br&gt;
✅ [과제] 과제 TIL &amp;amp; 트러블 슈팅 작성&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-개인-과제---도전-구현&#34;&gt;✅ 개인 과제 - 도전 구현&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://velog.io/@ezro/camp-task-3&#34;&gt;[내일배움캠프] 과제 - 계산기 3&lt;/a&gt; &lt;strong&gt;/&lt;/strong&gt; &lt;a href=&#34;https://github.com/withong/nbc-chapter-02/tree/main/calculator/level3&#34;&gt;[GitHub] nbc-chapter-02/calculator/level3&lt;/a&gt;
&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-level-2-vs-level-3&#34;&gt;🫠 &lt;code&gt;level 2 vs level 3&lt;/code&gt;&lt;/h2&gt;
&lt;br&gt;
&lt;h3 id=&#34;개선된-점&#34;&gt;개선된 점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;단일 클래스 구조 → 다층 구조 (패키지 분리)&lt;/li&gt;
&lt;li&gt;Enum을 통한 연산자(Operator) 관리&lt;/li&gt;
&lt;li&gt;제네릭(Operand) + BigDecimal 도입&lt;/li&gt;
&lt;li&gt;람다와 스트림을 이용한 결과 필터링 기능 추가&lt;/li&gt;
&lt;li&gt;커스텀 예외 클래스(CalculatorException) 활용&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&#34;개선할-점&#34;&gt;개선할 점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Operand&amp;lt;T&amp;gt;&lt;/code&gt;가 BigDecimal로만 사용되는 점&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>[내일배움캠프] 계산기 Lv 1-2 회고</title>
      <link>http://localhost:1313/camp/day-10/</link>
      <pubDate>Fri, 28 Feb 2025 21:00:00 +0900</pubDate>
      <guid>http://localhost:1313/camp/day-10/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;✅ [과제] Java 계산기 만들기 level 2 수정&lt;br&gt;
✅ [과제] 과제 TIL &amp;amp; 트러블 슈팅 작성&lt;br&gt;
✅ [문제] 알고리즘 문제 풀기&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;br&gt;
&lt;h2 id=&#34;-개인-과제---필수-구현&#34;&gt;✅ 개인 과제 - 필수 구현&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://velog.io/@ezro/camp-task-1&#34;&gt;[내일배움캠프] 과제 - 계산기 1&lt;/a&gt; &lt;strong&gt;/&lt;/strong&gt; &lt;a href=&#34;https://github.com/withong/nbc-chapter-02/tree/main/calculator/level1&#34;&gt;[GitHub] nbc-chapter-02/calculator/level1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://velog.io/@ezro/camp-task-2&#34;&gt;[내일배움캠프] 과제 - 계산기 2&lt;/a&gt; &lt;strong&gt;/&lt;/strong&gt; &lt;a href=&#34;https://github.com/withong/nbc-chapter-02/tree/main/calculator/level2&#34;&gt;[GitHub] nbc-chapter-02/calculator/level2&lt;/a&gt;
&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-level-1-vs-level-2&#34;&gt;🫠 &lt;code&gt;level 1 vs level 2&lt;/code&gt;&lt;/h2&gt;
&lt;h3 id=&#34;개선된-점&#34;&gt;개선된 점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;계산 결과 객체, 계산기 기능 클래스, 프로그램 실행으로 역할 분리&lt;/li&gt;
&lt;li&gt;&lt;code&gt;calculate()&lt;/code&gt;의 반환 타입 &lt;code&gt;double&lt;/code&gt;에서 &lt;code&gt;String&lt;/code&gt;으로 변경&lt;br&gt;
→ 연산 오류 처리 반환값 &lt;code&gt;-9999&lt;/code&gt;에서 &lt;code&gt;의미 있는 메시지&lt;/code&gt;로 개선&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CalculationRecord&lt;/code&gt; 클래스 추가하여 연산 기록 저장 방식 개선&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trimRecords()&lt;/code&gt; 추가하여 과도한 데이터 누적 방지&lt;/li&gt;
&lt;li&gt;0으로 나누기 처리 &lt;code&gt;Error&lt;/code&gt;에서 &lt;code&gt;정의되지 않음&lt;/code&gt;으로 개선&lt;/li&gt;
&lt;li&gt;int 범위 초과 처리 &lt;code&gt;Error&lt;/code&gt;에서 &lt;code&gt;연산 범위 초과&lt;/code&gt;로 개선&lt;/li&gt;
&lt;li&gt;최근 연산 기록 조회할 수 있도록 &lt;code&gt;showRecords()&lt;/code&gt; 추가&lt;/li&gt;
&lt;li&gt;사용자가 직접 삭제할 수 있도록 &lt;code&gt;removeRecords()&lt;/code&gt; 메서드 추가.
&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;개선할-점&#34;&gt;개선할 점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt; 범위 초과하는 입력값, 연산 결과 오류 → &lt;code&gt;long&lt;/code&gt;으로 확장&lt;/li&gt;
&lt;li&gt;오류 처리 방식 &lt;code&gt;handleError&lt;/code&gt; → 커스텀 예외 처리&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>

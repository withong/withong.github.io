<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>계산기 on withong</title>
    <link>http://localhost:1313/tag/%EA%B3%84%EC%82%B0%EA%B8%B0/</link>
    <description>Recent content in 계산기 on withong</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>ko</language>
    <lastBuildDate>Wed, 05 Mar 2025 23:00:00 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/tag/%EA%B3%84%EC%82%B0%EA%B8%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>계산기 Lv 3 회고</title>
      <link>http://localhost:1313/project/calculator-05/</link>
      <pubDate>Wed, 05 Mar 2025 23:00:00 +0900</pubDate>
      <guid>http://localhost:1313/project/calculator-05/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;✅ [문제] 알고리즘 &amp;amp; SQL 문제 풀기&lt;br&gt;
✅ [과제] Java 계산기 만들기 level 3 마무리&lt;br&gt;
✅ [과제] 과제 TIL &amp;amp; 트러블 슈팅 작성&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-개인-과제---도전-구현&#34;&gt;✅ 개인 과제 - 도전 구현&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://velog.io/@ezro/camp-task-3&#34;&gt;[내일배움캠프] 과제 - 계산기 3&lt;/a&gt; &lt;strong&gt;/&lt;/strong&gt; &lt;a href=&#34;https://github.com/withong/nbc-chapter-02/tree/main/calculator/level3&#34;&gt;[GitHub] nbc-chapter-02/calculator/level3&lt;/a&gt;
&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-level-2-vs-level-3&#34;&gt;🫠 &lt;code&gt;level 2 vs level 3&lt;/code&gt;&lt;/h2&gt;
&lt;br&gt;
&lt;h3 id=&#34;개선된-점&#34;&gt;개선된 점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;단일 클래스 구조 → 다층 구조 (패키지 분리)&lt;/li&gt;
&lt;li&gt;Enum을 통한 연산자(Operator) 관리&lt;/li&gt;
&lt;li&gt;제네릭(Operand) + BigDecimal 도입&lt;/li&gt;
&lt;li&gt;람다와 스트림을 이용한 결과 필터링 기능 추가&lt;/li&gt;
&lt;li&gt;커스텀 예외 클래스(CalculatorException) 활용&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&#34;개선할-점&#34;&gt;개선할 점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Operand&amp;lt;T&amp;gt;&lt;/code&gt;가 BigDecimal로만 사용되는 점&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>계산기 Lv 3</title>
      <link>http://localhost:1313/project/calculator-04/</link>
      <pubDate>Wed, 05 Mar 2025 22:00:00 +0900</pubDate>
      <guid>http://localhost:1313/project/calculator-04/</guid>
      <description>&lt;h2 id=&#34;요구사항&#34;&gt;요구사항&lt;/h2&gt;
&lt;p&gt;Enum, 제네릭, 람다 &amp;amp; 스트림을 이해한 계산기 만들기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;현재 사칙연산 계산기는 (➕,➖,✖️,➗) 이렇게 총 4가지 연산 타입으로 구성되어 있습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enum 타입을 활용하여 연산자 타입에 대한 정보를 관리하고 이를 사칙연산 계산기 ArithmeticCalculator 클래스에 활용 해봅니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;실수, 즉 double 타입의 값을 전달 받아도 연산이 수행하도록 만들기&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;키워드 : &lt;code&gt;제네릭&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;단순히, 기존의 Int 타입을 double 타입으로 바꾸는 게 아닌 점에 주의하세요!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;지금까지는 ArithmeticCalculator, 즉 사칙연산 계산기는 양의 정수(0 포함)를 매개변수로 전달받아 연산을 수행&lt;/li&gt;
&lt;li&gt;피연산자를 여러 타입으로 받을 수 있도록 기능을 확장
&lt;ul&gt;
&lt;li&gt;ArithmeticCalculator 클래스의 연산 메서드(&lt;code&gt;calculate&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;위 요구사항을 만족할 수 있도록 ArithmeticCalculator 클래스를 수정합니다. (제네릭)
&lt;ul&gt;
&lt;li&gt;추가적으로 수정이 필요한 다른 클래스나 메서드가 있다면 같이 수정 해주세요.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;저장된 연산 결과들 중 Scanner로 입력받은 값보다 큰 결과값 들을 출력&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>계산기 Lv 1-2 회고</title>
      <link>http://localhost:1313/project/calculator-03/</link>
      <pubDate>Fri, 28 Feb 2025 22:00:00 +0900</pubDate>
      <guid>http://localhost:1313/project/calculator-03/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;✅ [과제] Java 계산기 만들기 level 2 수정&lt;br&gt;
✅ [과제] 과제 TIL &amp;amp; 트러블 슈팅 작성&lt;br&gt;
✅ [문제] 알고리즘 문제 풀기&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;br&gt;
&lt;h2 id=&#34;-개인-과제---필수-구현&#34;&gt;✅ 개인 과제 - 필수 구현&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://velog.io/@ezro/camp-task-1&#34;&gt;[내일배움캠프] 과제 - 계산기 1&lt;/a&gt; &lt;strong&gt;/&lt;/strong&gt; &lt;a href=&#34;https://github.com/withong/nbc-chapter-02/tree/main/calculator/level1&#34;&gt;[GitHub] nbc-chapter-02/calculator/level1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://velog.io/@ezro/camp-task-2&#34;&gt;[내일배움캠프] 과제 - 계산기 2&lt;/a&gt; &lt;strong&gt;/&lt;/strong&gt; &lt;a href=&#34;https://github.com/withong/nbc-chapter-02/tree/main/calculator/level2&#34;&gt;[GitHub] nbc-chapter-02/calculator/level2&lt;/a&gt;
&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-level-1-vs-level-2&#34;&gt;🫠 &lt;code&gt;level 1 vs level 2&lt;/code&gt;&lt;/h2&gt;
&lt;h3 id=&#34;개선된-점&#34;&gt;개선된 점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;계산 결과 객체, 계산기 기능 클래스, 프로그램 실행으로 역할 분리&lt;/li&gt;
&lt;li&gt;&lt;code&gt;calculate()&lt;/code&gt;의 반환 타입 &lt;code&gt;double&lt;/code&gt;에서 &lt;code&gt;String&lt;/code&gt;으로 변경&lt;br&gt;
→ 연산 오류 처리 반환값 &lt;code&gt;-9999&lt;/code&gt;에서 &lt;code&gt;의미 있는 메시지&lt;/code&gt;로 개선&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CalculationRecord&lt;/code&gt; 클래스 추가하여 연산 기록 저장 방식 개선&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trimRecords()&lt;/code&gt; 추가하여 과도한 데이터 누적 방지&lt;/li&gt;
&lt;li&gt;0으로 나누기 처리 &lt;code&gt;Error&lt;/code&gt;에서 &lt;code&gt;정의되지 않음&lt;/code&gt;으로 개선&lt;/li&gt;
&lt;li&gt;int 범위 초과 처리 &lt;code&gt;Error&lt;/code&gt;에서 &lt;code&gt;연산 범위 초과&lt;/code&gt;로 개선&lt;/li&gt;
&lt;li&gt;최근 연산 기록 조회할 수 있도록 &lt;code&gt;showRecords()&lt;/code&gt; 추가&lt;/li&gt;
&lt;li&gt;사용자가 직접 삭제할 수 있도록 &lt;code&gt;removeRecords()&lt;/code&gt; 메서드 추가.
&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;개선할-점&#34;&gt;개선할 점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt; 범위 초과하는 입력값, 연산 결과 오류 → &lt;code&gt;long&lt;/code&gt;으로 확장&lt;/li&gt;
&lt;li&gt;오류 처리 방식 &lt;code&gt;handleError&lt;/code&gt; → 커스텀 예외 처리&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>계산기 Lv 2</title>
      <link>http://localhost:1313/project/calculator-02/</link>
      <pubDate>Fri, 28 Feb 2025 21:00:00 +0900</pubDate>
      <guid>http://localhost:1313/project/calculator-02/</guid>
      <description>&lt;h2 id=&#34;요구사항&#34;&gt;요구사항&lt;/h2&gt;
&lt;p&gt;클래스를 적용해 기본적인 연산을 수행할 수 있는 계산기 만들기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;사칙연산을 수행 후, 결과값 반환 메서드 구현 &amp;amp; 연산 결과를 저장하는 컬렉션 타입 필드를 가진 Calculator 클래스를 생성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사칙연산을 수행한 후, 결과값을 반환하는 메서드 구현&lt;/li&gt;
&lt;li&gt;연산 결과를 저장하는 컬렉션 타입 필드를 가진 Calculator 클래스를 생성&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;양의 정수 2개(0 포함)와 연산 기호를 매개변수로 받아 사칙연산(➕,➖,✖️,➗) 기능을 수행한 후 2) 결과 값을 반환하는 메서드와 연산 결과를 저장하는 컬렉션 타입 필드를 가진 Calculator 클래스를 생성합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lv 1에서 구현한 App 클래스의 main 메서드에 Calculator 클래스가 활용될 수 있도록 수정&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>계산기 Lv 1</title>
      <link>http://localhost:1313/project/calculator-01/</link>
      <pubDate>Wed, 26 Feb 2025 22:00:00 +0900</pubDate>
      <guid>http://localhost:1313/project/calculator-01/</guid>
      <description>&lt;h2 id=&#34;요구사항&#34;&gt;요구사항&lt;/h2&gt;
&lt;p&gt;클래스 없이 기본적인 연산을 수행할 수 있는 계산기 만들기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;양의 정수(0 포함)를 입력받기&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scanner를 사용하여 양의 정수 2개(0 포함)를 전달 받을 수 있습니다.&lt;/li&gt;
&lt;li&gt;양의 정수는 각각 하나씩 전달 받습니다.&lt;/li&gt;
&lt;li&gt;양의 정수는 적합한 타입으로 선언한 변수에 저장합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;사칙연산 기호(➕,➖,✖️,➗)를 입력받기&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scanner를 사용하여 사칙연산 기호를 전달 받을 수 있습니다.&lt;/li&gt;
&lt;li&gt;사칙연산 기호를 적합한 타입으로 선언한 변수에 저장합니다. (&lt;code&gt;charAt(0)&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;위에서 입력받은 양의 정수 2개와 사칙연산 기호를 사용하여 연산을 진행한 후 결과값을 출력하기&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;키워드 : &lt;code&gt;if&lt;/code&gt; &lt;code&gt;switch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;사칙연산 기호에 맞는 연산자를 사용하여 연산을 진행합니다.&lt;/li&gt;
&lt;li&gt;입력받은 연산 기호를 구분하기 위해 제어문을 사용합니다. (예를 들면 if, switch)&lt;/li&gt;
&lt;li&gt;연산 오류가 발생할 경우 해당 오류에 대한 내용을 정제하여 출력합니다.
&lt;ul&gt;
&lt;li&gt;ex) “나눗셈 연산에서 분모(두번째 정수)에 0이 입력될 수 없습니다.“&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;반복문을 사용하되, 반복의 종료를 알려주는 “exit” 문자열을 입력하기 전까지 무한으로 계산을 진행할 수 있도록 소스 코드를 수정하기&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

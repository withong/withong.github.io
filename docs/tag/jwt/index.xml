<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JWT on withong</title>
    <link>https://withong.github.io/tag/jwt/</link>
    <description>Recent content in JWT on withong</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>ko</language>
    <lastBuildDate>Thu, 10 Apr 2025 20:22:48 +0900</lastBuildDate>
    <atom:link href="https://withong.github.io/tag/jwt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JWT (JSON Web Token)</title>
      <link>https://withong.github.io/record/2025-04-10/</link>
      <pubDate>Thu, 10 Apr 2025 20:22:48 +0900</pubDate>
      <guid>https://withong.github.io/record/2025-04-10/</guid>
      <description>&lt;hr&gt;
&lt;br&gt;
&lt;h2 id=&#34;1-jwt란&#34;&gt;1. JWT란?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;JWT (JSON Web Token)&lt;/strong&gt; 은 사용자 인증에 사용되는 &lt;strong&gt;토큰 기반 인증 방식&lt;/strong&gt; 중 하나로,&lt;br&gt;
&lt;strong&gt;서버에 상태를 저장하지 않고도 인증 정보를 유지할 수 있는 구조&lt;/strong&gt;다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;구조&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;헤더(header).페이로드(payload).서명(signature)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Base64로 인코딩&lt;/strong&gt;되며, &lt;strong&gt;payload는 누구나 디코딩 가능&lt;/strong&gt;하므로 민감 정보를 넣지 않는다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;서명(Signature)&lt;/strong&gt; 으로 토큰의 위변조 여부를 서버가 확인할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;주된 목적&lt;/strong&gt;: 정보의 위변조 방지 (정보 보호 아님)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&#34;2-설정-방법&#34;&gt;2. 설정 방법&lt;/h2&gt;
&lt;p&gt;Spring Boot + JPA 프로젝트 기준&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;build.gradle&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;dependencies&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;org.springframework.boot:spring-boot-starter-data-jpa&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;org.springframework.boot:spring-boot-starter-validation&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;at.favre.lib:bcrypt:0.10.2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;compileOnly&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;org.projectlombok:lombok&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;runtimeOnly&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;com.mysql:mysql-connector-j&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;annotationProcessor&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;org.projectlombok:lombok&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;testImplementation&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;org.springframework.boot:spring-boot-starter-test&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;testRuntimeOnly&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;org.junit.platform:junit-platform-launcher&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// JWT 관련 추가
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;io.jsonwebtoken:jjwt-api:0.11.2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;io.jsonwebtoken:jjwt-impl:0.11.2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;io.jsonwebtoken:jjwt-jackson:0.11.2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h2 id=&#34;3-jwt-구조-및-인증-흐름&#34;&gt;3. JWT 구조 및 인증 흐름&lt;/h2&gt;
&lt;h3 id=&#34;jwt-구조&#34;&gt;JWT 구조&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;구성 요소&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Header&lt;/td&gt;
          &lt;td&gt;알고리즘 정보 (예: HS256)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Payload&lt;/td&gt;
          &lt;td&gt;사용자 정보(예: username) 및 만료 시간 등&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Signature&lt;/td&gt;
          &lt;td&gt;secret key를 기반으로 만든 서명, 위변조 방지용&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;jwt-인증-흐름&#34;&gt;JWT 인증 흐름&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;클라이언트가 로그인 요청 (POST /login)&lt;/li&gt;
&lt;li&gt;서버가 사용자 인증 후 JWT 생성&lt;/li&gt;
&lt;li&gt;클라이언트는 JWT를 응답으로 받고, 저장 (쿠키, 로컬 스토리지 등)&lt;/li&gt;
&lt;li&gt;이후 요청마다 JWT를 Authorization 헤더에 담아 전송&lt;/li&gt;
&lt;li&gt;서버는 JWT 유효성 검사 (서명, 만료 여부 확인)&lt;/li&gt;
&lt;li&gt;인증 통과 시 사용자 정보 추출 후 요청 처리&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2 id=&#34;4-로그인-구현-예시&#34;&gt;4. 로그인 구현 예시&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;User 엔티티&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>키오스크 on withong</title>
    <link>http://localhost:1313/tag/%ED%82%A4%EC%98%A4%EC%8A%A4%ED%81%AC/</link>
    <description>Recent content in 키오스크 on withong</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>ko</language>
    <lastBuildDate>Wed, 12 Mar 2025 21:01:14 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/tag/%ED%82%A4%EC%98%A4%EC%8A%A4%ED%81%AC/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>키오스크 도전 Lv 2</title>
      <link>http://localhost:1313/task/kiosk-04/</link>
      <pubDate>Wed, 12 Mar 2025 21:01:14 +0900</pubDate>
      <guid>http://localhost:1313/task/kiosk-04/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;요구사항&#34;&gt;요구사항&lt;/h2&gt;
&lt;h3 id=&#34;lv-2-enum-람다--스트림을-활용한-주문-및-장바구니-관리&#34;&gt;Lv 2. Enum, 람다 &amp;amp; 스트림을 활용한 주문 및 장바구니 관리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;요구사항이 가지는 의도&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;의도&lt;/strong&gt; : 고급 자바 기능을 활용해 프로그램의 효율성과 코드의 가독성을 개선하는 것을 목표로 합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;목적&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Enum을 통해 상수를 안전하게 관리하고, 프로그램 구조를 간결하게&lt;/li&gt;
&lt;li&gt;제네릭을 활용하여 데이터 유연성을 높이고, 재사용 가능한 코드를 설계&lt;/li&gt;
&lt;li&gt;스트림 API를 사용하여 데이터를 필터링하고, 간결한 코드로 동작을 구현&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enum을 활용한 사용자 유형별 할인율 관리하기&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;사용자 유형의 Enum 정의 및 각 사용자 유형에 따른 할인율 적용
&lt;ul&gt;
&lt;li&gt;예시 : 군인, 학생, 일반인&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;주문 시, 사용자 유형에 맞는 할인율 적용해 총 금액 계산&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;람다 &amp;amp; 스트림을 활용한 장바구니 조회 기능&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;기존에 생성한 Menu의 MenuItem을 조회 할 때 스트림을 사용하여 출력하도록 수정&lt;/li&gt;
&lt;li&gt;기존 장바구니에서 특정 메뉴 빼기 기능을 통한 스트림 활용
&lt;ul&gt;
&lt;li&gt;예시 : 장바구니에 SmokeShack 가 들어 있다면, stream.filter를 활용하여 특정 메뉴 이름을 가진 메뉴 장바구니에서 제거&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;구현-기능&#34;&gt;구현 기능&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/withong/nbc-chapter-02/tree/main/kiosk/challenge/level2&#34;&gt;# 전체 코드&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>키오스크 도전 Lv 1</title>
      <link>http://localhost:1313/task/kiosk-03/</link>
      <pubDate>Wed, 12 Mar 2025 11:17:50 +0900</pubDate>
      <guid>http://localhost:1313/task/kiosk-03/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;요구사항&#34;&gt;요구사항&lt;/h2&gt;
&lt;h3 id=&#34;lv-1-장바구니-및-구매하기-기능을-추가하기&#34;&gt;Lv 1. 장바구니 및 구매하기 기능을 추가하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;요구사항이 가지는 의도&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;의도&lt;/strong&gt;: 클래스 간 연계를 통해 객체 지향 프로그래밍의 기본적인 설계를 익히고, 사용자 입력에 따른 프로그램 흐름 제어와 상태 관리를 학습&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;목표&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;클래스 간 역할 분리를 이해하고, 적절히 협력하는 객체를 설계&lt;/li&gt;
&lt;li&gt;프로그램 상태 변경 및 데이터 저장을 연습&lt;/li&gt;
&lt;li&gt;사용자 입력에 따른 예외 처리와 조건 분기를 연습&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;장바구니 생성 및 관리 기능&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 선택한 메뉴를 장바구니에 추가할 수 있는 기능을 제공합니다.&lt;/li&gt;
&lt;li&gt;장바구니는 메뉴명, 수량, 가격 정보를 저장하며, 항목을 동적으로 추가 및 조회할 수 있어야 합니다.&lt;/li&gt;
&lt;li&gt;사용자가 잘못된 선택을 했을 경우 예외를 처리합니다(예: 유효하지 않은 메뉴 번호 입력)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;장바구니 출력 및 금액 계산&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 결제를 시도하기 전에, 장바구니에 담긴 모든 메뉴와 총 금액을 출력합니다.&lt;/li&gt;
&lt;li&gt;출력 예시
&lt;ul&gt;
&lt;li&gt;각 메뉴의 이름, 가격, 수량&lt;/li&gt;
&lt;li&gt;총 금액 합계&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;장바구니 담기 기능&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;메뉴를 클릭하면 장바구니에 추가할 지 물어보고, 입력값에 따라 “추가”, “취소” 처리합니다.
&lt;ul&gt;
&lt;li&gt;메뉴는 한 번에 1개만 담을 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;장바구니에 담은 목록을 출력합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;주문 기능&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;장바구니에 담긴 모든 항목을 출력합니다.&lt;/li&gt;
&lt;li&gt;합산하여 총 금액을 계산하고, “주문하기”를 누르면 장바구니를 초기화합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;구현-기능&#34;&gt;구현 기능&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/withong/nbc-chapter-02/tree/main/kiosk/challenge/level1&#34;&gt;# 전체 코드&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>키오스크 필수 Lv 4-5</title>
      <link>http://localhost:1313/task/kiosk-02/</link>
      <pubDate>Mon, 10 Mar 2025 19:13:06 +0900</pubDate>
      <guid>http://localhost:1313/task/kiosk-02/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;요구사항&#34;&gt;요구사항&lt;/h2&gt;
&lt;h3 id=&#34;lv-4-객체-지향-설계를-적용해-음식-메뉴와-주문-내역을-클래스-기반으로-관리하기&#34;&gt;Lv 4. 객체 지향 설계를 적용해 음식 메뉴와 주문 내역을 클래스 기반으로 관리하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Menu&lt;/code&gt; 클래스 생성하기&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;설명 : MenuItem 클래스를 관리하는 클래스입니다.
예를 들어, 버거 메뉴, 음료 메뉴 등 각 카테고리 내에 여러 &lt;code&gt;MenuItem&lt;/code&gt;을 포함합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;List&amp;lt;MenuItem&amp;gt;&lt;/code&gt; 은 &lt;code&gt;Kiosk&lt;/code&gt; 클래스가 관리하기에 적절하지 않으므로 Menu 클래스가 관리하도록 변경합니다.&lt;/li&gt;
&lt;li&gt;여러 버거들을 포함하는 상위 개념 ‘버거’ 같은 &lt;code&gt;카테고리 이름&lt;/code&gt; 필드를 갖습니다.&lt;/li&gt;
&lt;li&gt;메뉴 카테고리 이름을 반환하는 메서드가 구현되어야 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&#34;lv-5-캡슐화-적용하기&#34;&gt;Lv 5. 캡슐화 적용하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MenuItem&lt;/code&gt;, &lt;code&gt;Menu&lt;/code&gt; 그리고 &lt;code&gt;Kiosk&lt;/code&gt; 클래스의 필드에 직접 접근하지 못하도록 설정합니다.&lt;/li&gt;
&lt;li&gt;Getter와 Setter 메서드를 사용해 데이터를 관리합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;구현-기능&#34;&gt;구현 기능&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/withong/nbc-chapter-02/tree/main/kiosk/basic/level4&#34;&gt;#전체 코드&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>키오스크 필수 Lv 1-3</title>
      <link>http://localhost:1313/task/kiosk-01/</link>
      <pubDate>Fri, 07 Mar 2025 21:00:00 +0900</pubDate>
      <guid>http://localhost:1313/task/kiosk-01/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;요구사항&#34;&gt;요구사항&lt;/h2&gt;
&lt;h3 id=&#34;lv-1-기본적인-키오스크를-프로그래밍해보자&#34;&gt;Lv 1. 기본적인 키오스크를 프로그래밍해보자&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;요구사항이 가지는 의도&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;입력 처리와 간단한 흐름 제어를 복습합니다. (프로그래밍 검증)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Scanner&lt;/code&gt; 활용법, 조건문, 반복문을 재확인하며 입력 데이터를 처리하는 방법 강화&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;햄버거 메뉴 출력 및 선택하기&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실행시 햄버거 메뉴가 표시되고, 이후 Scanner로 숫자를 입력받아서 메뉴를 선택할 수 있다.&lt;/li&gt;
&lt;li&gt;제시된 메뉴 중 입력받은 숫자에 따라 다른 로직을 실행하는 코드를 작성합니다.&lt;/li&gt;
&lt;li&gt;반복문을 이용해서 특정 번호가 입력되면 프로그램을 종료합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h3 id=&#34;lv-2-객체-지향-설계를-적용해-햄버거-메뉴를-클래스로-관리하기&#34;&gt;Lv 2. 객체 지향 설계를 적용해 햄버거 메뉴를 클래스로 관리하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;요구사항이 가지는 의도&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
